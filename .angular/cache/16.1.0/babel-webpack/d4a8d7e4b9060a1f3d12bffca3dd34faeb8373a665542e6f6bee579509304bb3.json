{"ast":null,"code":"import * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { SERVER_ENDPOINT } from '../common/globals';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web-socket-share.service\";\nlet WebSocketAPI = /*#__PURE__*/(() => {\n  class WebSocketAPI {\n    constructor(websocketShare) {\n      this.websocketShare = websocketShare;\n      this.webSocketEndPoint = SERVER_ENDPOINT + '/api/ws';\n      this.topic = \"/topic/server-notification\";\n    }\n    connect() {\n      console.log(\"Initialize WebSocket Connection\");\n      let ws = new SockJS(this.webSocketEndPoint);\n      this.stompClient = Stomp.over(ws);\n      const _this = this;\n      _this.stompClient.connect({}, function (frame) {\n        _this.stompClient.subscribe(_this.topic, function (sdkEvent) {\n          _this.onMessageReceived(sdkEvent);\n        });\n      }, this.errorCallBack);\n    }\n    disconnect() {\n      if (this.stompClient !== null) {\n        this.stompClient.disconnect();\n      }\n      console.log(\"Disconnected\");\n    }\n    // on error, schedule a reconnection attempt\n    errorCallBack(error) {\n      console.log(\"errorCallBack -> \" + error);\n      setTimeout(() => {\n        this.connect();\n      }, 5000);\n    }\n    onMessageReceived(message) {\n      this.websocketShare.onNewValueReceive(message.body);\n    }\n  }\n  WebSocketAPI.ɵfac = function WebSocketAPI_Factory(t) {\n    return new (t || WebSocketAPI)(i0.ɵɵinject(i1.WebSocketShareService));\n  };\n  WebSocketAPI.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebSocketAPI,\n    factory: WebSocketAPI.ɵfac\n  });\n  return WebSocketAPI;\n})();\nexport { WebSocketAPI };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}